/* 

    Packages : {
        Breeze, Intervention,EasyZoom,
    }

*/


1. Lets install laravel.
2. Lets install breeze in project for authentication.
3. Lets Merge Admin dashboard;
4. Lets Make Admin & Vendor dataTables in database + Model for both admin & vendor;
5. Lets Make Auth for admin login with the help of breeze.So that no can see dashboard without login in to it; And Beside this lets have a logout option from dashboard and redirect admin to login page;
6. Lets do authentication of admin login page;
7. In dashboard lets have admin settings option.and from there lets change admin password;

8. Lets change admin details as well from settings;
9. Lets update admin image with the help of intervention package;

// Lets work with vendor

10. Lets make vendor,vendorbusinessdetail & vendorBankDetail 3 model + database;
11. Lets update 3 model + database of (10)no. from vendor dashboard;
12. Lets fetch all admin details in admin dashboard;
13. Lets see vendors all details from admin dashboard;
14. Lets manage admin status from admin dashboard;
15. Lets make countries database and with the help of this database lets select vendor's country + vendor's shop country;
27 . Lets make vendor registration with email verification.
28. Lets have admin to approve vendor id and let them allow to add products and show only those products whom are added by this vendor;


// Again Admin Work
16. Lets create section datatable + model and show it in admin dashboard.In Section module lets have sections,category and product option;
17. In section database lets put data with seeder and fetch them in dashboard section option and manage the status of every section + lets have datatable option in section table,so that we can search items easily;
18. Lets do crud of section module;
19. Lets do crud of category module with subcategory as well;
    19.1: Every Category is under Section.So thats why lets make relation between category and section in Category model.
    19.2: Every Subcategory is under Category.So thats why lets make relation between category and subcategory with the help of parentcategory option.
    19.3: For Select subcategory lets have the help of ajax;

20. Lets do crud of brand module;
21. Lets do crud of product module;
    21.1: for find all section category subcategory lets make relation between section & category in Section model;

    
22. Lets have product attribute module and crud it;
23. Lets have product images module and crud it.With the help of this module lets have multiple image of product.
24. Lets have banner section in admin dashboard & do crud it;
25. Lets have product filter so that customer can find his products easily.For that lets have 2 db table call product filter & product filter value. And crud them with the help of FilterController;
26. Now lets have those filter columns in product table and select every column's data by select option while we add a new product in db;



// Lets work with frontend
1. Lets merge frontend template;
2. Fetch all section category subcategory and show them in home page;
3. Fetch all banner and show them in home page;
4. Lets fetch New Arrivals products in home page;
5. Lets fetch Best Seller products in home page;
6. Lets fetch Discounted products in home page;
7. Lets fetch featured products in home page;
8. Lets listing products by its category subcategories in frontend.With the help of url;
9. Lets filter product by sort of highest price low price new products with and without ajax;
10. Lets filter product by color size price filter value
11. Lets make product details page and show each and every details of all products.
    11.1. Lets filter product price with product size by fetching data from product attribute via ajax;
    11.2. Lets show product filter values in product details page.
    11.3. Lets zoom product images in details page with easyZoom Package.
    11.4. Lets Connect Vendor with Product model with belongs to relation and lets connect vendor and vendorbussinessdetails so that we ll get vendor all details and we'll show vendor shop name in product details page if those products are added by vendor.
    11.5. Lets show similar kind of products in details page. Similar products will fetch by which brand type products details are showing;
    11.6. Lets show recently visited products with the help of recently_visited_products table..where by clicking  product database gonna fetch product_id and session_id and store them in DB.And then those products will be shown in recently visited products option.
    Databse Field Name:
    product_id, session_id
    
12. Lets make vendor products page and fetch all products which are added by one vendor;

13. Lets Make Cart option.User can add product to the cart with the help of cart model and db.
    Database Field Name:
        session_id,user_id,product_id,size,quantity

    13.1. First of all lets fetch product details from product attribute with product_id and fetch product stock by size.
    13.2. controller->cart function lets check is the stock > quantity or not.if its true then add the product in cart db or else not.
    13.3 If user is not logged in then then we will recieve the item in cart with session id;
    13.4 Lets have a cart page and we'll show all products who have added to cart.for getting all products details lets have a belongs to function in cart model with product model with the help of product_id;
    13.5 Lets update Cart items quantity with the help of ajax.Update cart db quantity field as well;
    13.6 Lets filter cart item with product stock..if customer add item qty more then product stock then it will show a alert msg + if admin off the product size status to 0 then also customer will saw a alert message that this size is not available
    13.7 Lets delete the cart item from cart page with the help of ajax; 

    // User Login registration
    14.1 Lets have a users table in db and put those data field:
        name,address,city,state,country,mobile,email,pincode,password,status
    14.2 Lets make login register page for user in frontend.
    14.3 Lets register user in database with the help of ajax.So that it will not refresh while user submit his/her details from register form.
    14.4 Lets validate our register form with the help of ajax.
    14.5 Lets give a welcome email to the users who have registered in the website.

    14.6 You can send welcome message to our customer via laravel sms packages in there personal mobile number.

    14.7 Now lets make login option and lets have login option for users.For login as well we'll use ajax for first load.
    14.8 If user add cart without register or login to the side & after adding product to the cart if they register or login to the site then we will check session id and user id and we'll put the new register or logged in users id to the cart user_id field of the database;

    14.9 Before giving new registerd user a welcome message lets give them a confirmation email.By clicking this email there account will be activate. Until then the registration will not be 100% completed.

    14.10 After confirming the email user will be redirect to the login page and a welcome email will also come to his/her email as well.

    14.11 While user submit register button lets have a loader until user get the confirmation email.

    14.12 Lets add forgot password option for users and let them have there password using the email address they have been used during register.

    14.13 Lets have my account page for user and from there lets update user details like name address city etc.

    14.14 Lets have Auth protection for user account so that without login no one can go to user/account page.


    15. Lets have a helper.For that create folder in app..add helper.php under it..go to composer.json add this file in autoload and from terminal play composer dump-autoload. 

    15.1 With the help of helper lets update cart items.lets have a cart item function in helper and fetch it in header for cart item update and for ajax lets call this function in update and delete cart function in controller and js file.

    15.2 Lets Show cart items in mini cart bar of header with the help of helper and ajax.


    16. Lets Make Coupon option in website:

    16.1 Lets create a table in database:
        ('vendor_id');('coupon_option');('coupon_code');('categories');('brands');('users');('coupon_type');('amount_type');('amount');('expiry_date');('status');
    
    16.2 Lets add some dummy data in it with the help of seeder && lets make coupon model and admin coupon controller
    16.3 Lets fetch coupons table data in admin panel and work with status active inactive and delete coupon.

    16.3 Lets create add edit form for coupon.
    16.4 For automatic generate coupon code lets use str_random() function and for use it lets install: composer require laravel/helpers
    16.5 Lets add data in database with add coupon form and fetch them in admin panel.
    16.6 Lets Update coupon's from the admin panel.
    16.7 Lets check coupon status active or not, expiry date is gone or not, is coupon is for selected category or not, coupon is for user or not, if not then show error message, if vendor add any coupon then it'll be only usable in that products whom added by this vendor.
    16.8 Lets use coupon in cart item and make discount as coupon amount type fixed or percentage.
    16.9 Lets make condition on coupon type.If the coupon type is single time then it cannot be reusable.
     
    17. Lets Fetch all users info from database to admin panel

    // Checkout

    18.1. Lets make delivery_addresses db_table model and fill the table with those field name:
        $table->integer('user_id');$table->string('name');$table->string('address');$table->string('city');$table->string('state');$table->string('country');$table->string('pincode');$table->string('mobile');$table->tinyInteger('status');
        Lets have some dummy data with seeder.

    18.2. If user has delivery_addresses then lets show them in checkout page.If not then lets show add address option in checkout page.
    18.3 With the help of ajax lets fetch all info of user from delivery_Addresses table for edit address data.
    18.4 Lets Update Delivery Address with the help of ajax.
    18.5 Lets add and remove delivery address with the help of ajax.
    18.9 Lets do validation of delivery_Addresses add edit form.
    18.10 Lets fetch all data from cart in checkout page for see product name and price details + lets have payment option and delivery_addresses select option in it.If everything ok then lets redirect to order placement.

    // Order Placement:
    19.1 Lets have orders table and model in project and in db_table field:

     $table->integer('user_id');$table->string('name');$table->string('address');$table->string('city');$table->string('state');$table->string('country');$table->string('pincode');$table->string('mobile');$table->string('email');$table->float('shipping_charges');$table->string('coupon_code');$table->float('coupon_amount');$table->string('order_status');$table->string('payment_method');$table->string('payment_gateway');$table->float('grand_total');

    19.2 Lets have orders_products table and model in project and in db_field:

        $table->integer('order_id');$table->integer('user_id');$table->integer('vendor_id');$table->integer('admin_id');$table->integer('product_id');$table->string('product_code');$table->string('product_name');$table->string('product_color');$table->string('product_size');$table->float('product_price');$table->integer('product_qty');$table->string('order_status');

    19.3 Lets place an order with cash on delivery option and fill up both data table at a same time.For this lets use DB::beginTransaction() and DB::commit() and have codes for entering data in dataTables between this.

    19.4 Lets show a thanks page if user do checkout successfully and order being published + lets delete this item from cart.


    // User Orders details
    20. Lets make a order page for user under auth::middleware so that without login no one gonna see it.
    20.1 In order controller let's fetch all order of this user from Order model.
    20.2 In order model lets create a function and here lets create hasMany method with orders_products model  and use order_id as a key.
    20.3 Lets make order details page and fetch every order by its order_id.And in this page lets fetch order details,product details,delivery addresses.
    20.4 Lets have product image on order details page as well.for that lets make a function in product modal so that we can fetch the image of particular product

    20.5 Lets show orders in admin panel & the products added by vendors show those products order details in there dashboard.They will only see order details about which product they have been added in the website.

    20.6 Lets show orders details page in admin panel.Where admin can see Order details,customer details,delivery addresses,update order status,ordered products full details product name code image color qty etc.

    20.7 For order status lets have a order_status table in database.And fetch data from order status db_table to admin panel-order details page.And from here admin can update order status of those particular order and this order status will be updated on order_status data-field of orders table.Only admin can do this work.

    20.8 For vendor lets disable the order_status update option.And he can only see the order details of those products whom he has been added.Lets have a table order_item_statuses in database.And fetch data from order item status db_table to product details of admin panel-order details page.And from here admin/vendor can update item status of those particular items and this item status will be updated on item_status data-field of order_products table.Both the admin and the vendor can perform this task. However, the admin can update all order items, while the vendor can only update items that they have uploaded.

    20.9 Lets give user a order confirmation email when user procced a order with cash on delivery payment method.
    20.10 Lets give user a email when admin / vendor update users order status.
    20.11 Lets have a orders_log table in database and inside this lets have order_id and order_status field.Whenever admin will update orderStatus it will be go in orders_log table as well.And from this table order status and created time will show at order_details in admin panel.


    // Assign Courier into project:

    21. Lets add courier_name and tracking_number table_field_name in orders table.In admin panel order details page lets have this two input field when update status will be changed to shipped.For on change commande lets use custom.js. And lets add a condition that whenever the couier_name and tracking_number will have data it will update this data to orders table where id will be current order_id;



    // Invoice
    22. Lets create every orders invoice from admin panel.

    // Barcode 
    23. Lets install laravel package : composer require milon/barcode
    And from this github lets use barcode or qr code like this:
    -- echo DNS1D::getBarcodeHTML($product['product_code'], 'C39');



    // Paypal intregrate
    24. lets make a controller inside front for paypal.

    ** Lets update our project to laravel 10

    // Shipping charges 
    25. ** We'll set our charges depend on which coutry we are giving delivery.
    25.1. Lets create a shipping_charges db table:
            $table->id();
            $table->string('country');
            $table->float('rate');
            $table->tinyInteger('status');
            $table->timestamps();
    25.2. Lets show all data from database in admin panel.Only admin can see this data.And lets update every data status from admin panel as well.For do all this work lets add ShippingCharge model and admin/ShippingController as well.
    25.3. Lets edit shipping details from admin panel.We'll just edit shipping rate here.

    25.4. Lets select shipping address by user in  checkout page and from this shipping address we'll collect users country and we'll collect this country shipping rate from shipping_charges table.And we'll add this shipping rate in grand total of checkout page.For this:
        25.4.1 lets create a function in ShippingCharge model by which we'll collect rate of users address country.
        25.4.2 In checkout function lets add 25.4.1 function in deliveyAddress model and add the shipping rate in delivery_addresses table->shipping_charges.
        25.4.3 In checkout blade page in which input users are selecting their delivery address there lets add some attribute = shipping_charges="{{ $address['shipping_charges'] }}" total_price={{ $total_price }}coupon_amount={{ Session::get('couponAmount') }}
        25.4.4 Then in custom.js lets add this function->
            $("input[name=address_id]").bind("change", function () {
            var shipping_charges = $(this).attr("shipping_charges");
            var total_price = $(this).attr("total_price");
            var coupon_amount = $(this).attr("coupon_amount");
            $(".shipping_charges").html(shipping_charges + "Tk");
            if (coupon_amount == "") {
                coupon_amount = 0;
            }
            $(".couponAmount").html(coupon_amount + " Tk");
            var grand_total =
                parseInt(total_price) +
                parseInt(shipping_charges) -
                parseInt(coupon_amount);
            // alert(grand_total);
            $(".grand_total").html(grand_total + " Tk");
        });

        25.4.5 By using classnames of 25.4.4 lets show output in checkout page without page refresh.
        25.4.6 In chekout function again lets add shipping_charges from ShippingCharge model function ->
            $shipping_charges = 0;
            // Get Shipping Charges
            $shipping_charges = ShippingCharge::getShippingCharges($deliveryAddress['country']);
        And lets add this charge in order table;

    // Advance Shipping module
    26. Lets remove rate field from shipping_charges db_table and lets add some others colums like:
    0_500g,501_1000g,1001_2000g,2001_5000g,above_5000g...
    and lets add/edit data on this field and show them in admin panel.We want to fixed shipping charges according to the weight of the products.
    26.1 Lets fetch product weight in cart model and lets fetch shipping charges with the help of product weight from ShippingCharge model.Lets fetch the total shipping charge in checkout function while user processed the checkout.

    // Stock management
    27. Lets reduce product stock from product attribute db_table while a user order the product.For that lets get help from productAttribute model and in chekout function when order place lets reduce number of product from stock of product_attributes db_table and update it in admin panel.
    ** when we'll add others payment_gateway so their also we have to reduce stock when user cofirm order with payment done;

    // Website security
    28.1 Lets prevent order of those products whom status are 0, out of stock,product attribute status 0 or not available or whom products category are disabled.
    28.2 Lets use Session::flush() in userController logout function so that if the user logout then the cart item will be also get remove from the website.
    28.3 Lets add if condition in addCart function so that if any user add product on 0 quantity it will automatically make quantity to 1;

    // Pincode Availability
    29.1 Lets have two db_table named cod_pincode and prepaid_pincode and add data of all pincode from bangladesh:
    id,pincode,created_at,updated_at  
    29.2 Now in checkout function where deliveryAddress and shipping amount are compared there lets compare pincode option from delivery_addresses and (29.1) cod_pincode and count how many pincode is available there,and same in with prepaid_pincode as well ->
        // COD pincode is available or not
            $deliveryAddresses[$key]['codpincodeCount'] = DB::table('cod_pincodes')->where('pincode',$value['pincode'])->count();
        // Prepaid pincode is available or not
            $deliveryAddresses[$key]['prepaidpincodeCount'] = DB::table('prepaid_pincodes')->where('pincode',$value['pincode'])->count();

    29.3 In checkout blade page from where user will select there delivery address in this input lets have ->
        codpincodeCount="{{ $address['codpincodeCount'] }}"
        prepaidpincodeCount="{{ $address['prepaidpincodeCount'] }}"

    in cash on delivery and paypal or bkash option lets have two class name.
    29.4 In custom.js where grand total is calculated there->
        var codpincodeCount = $(this).attr("codpincodeCount");
        var prepaidpincodeCount = $(this).attr("prepaidpincodeCount");
        if (codpincodeCount > 0) {
            $(".codMethod").show();
        } else {
            $(".codMethod").hide();
        }
        if (prepaidpincodeCount > 0) {
            $(".prepaidMethod").show();
        } else {
            $(".prepaidMethod").hide();
        }
    It means if the pincode user set in his delivey address from if it is match with cash on delivery db_table pincode then user will get the option of cash on delivery other wise user cannot use cash on delivey option.Same check will be happen with prepaidMethod as well.


    // Vendor Commission
    30. Lets add commission field in vendor db_table after confirm field and type will be float.
    30.1 Lets have an input form field in vendor details page inside admin panel so that admin can update commission percentage from there.
    30.2 Lets create a function in vendor model so that we can fetch commission percentage of very vendor->
        public static function getVendorCommission($vendorid){
            $getVendorCommission = Vendor::select('commission')->where('id',$vendorid)->first()->toArray();
            return $getVendorCommission['commission'];
        }

    30.3 Lets use this function in admin/order-details page so that vendor will get the updated news about how much commission he'll have to pay for this particular order and what will be his final amount from this order.But This commission amount and final amount will only see by vendor.Admin is not gonna have access to see this.For this lets use condition in order-details page.
    30.4 Lets add commission system in coupon discounted product.For that lets fetch total orders item and products quantity.Then lets find out is there any coupon_amount or not.If yes minus the coupon_amount from original price.And then the price will be show in vendor/admin order list.
    30.5 when we add a product in cart then apply coupon ...after applying coupon if we add more product in cart still the coupon remains there..so we have to session out of couponAmount and couponCode in front/productController inside update,delete,add cart function.

// Twilio
    4Q53ZP8TDRT2BC11MPD23JY9